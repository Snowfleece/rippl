%%
let char_list_to_str cl =
    match cl with
    | [] -> ""
    | [Ast.CharLit c] -> String.make 1 c
    | charlist -> let convert x = match x with 
        | Ast.CharLit c -> c 
        | _ -> 'F'
        in List.fold_left (^) "" (List.map (String.make 1) (List.map convert charlist))

let rec op_to_str s =
    match s with
    (* Boolean Operators *)
    | Or -> "or"
    | And -> "and"
    | Not -> "not"
    | Eq -> "=="
    | EqF -> "==."
    | Neq -> "!="
    | NeqF -> "!=."
    | Less -> "<"
    | LessF -> "<."
    | Greater -> ">"
    | GreaterF -> ">."
    | Leq -> "<="
    | LeqF -> "<=."
    | Geq -> ">="
    | GeqF -> ">=."
    (* Math Operations *)
    | Add -> "+"
    | Sub -> "-"
    | Mult -> "*"
    | Div -> "/"
    | AddF -> "+."
    | SubF -> "-."
    | MultF -> "*."
    | DivF -> "/."
    | Pow -> "^"
    | PowF -> "^."
    | Neg -> "neg"
    (* List Operations *)
    | Cons -> "cons"
    | Cat -> "cat"
    | Head -> "head"
    | Tail -> "tail"
    | Len -> "len"
    | Var(other) -> "Var("^other^")"
    | App(x,y) -> "App("^(ast_to_str x)^","^(ast_to_str y)^")"
    | _ -> "other"
and
ast_to_str exp =
    match exp with
    | Ite(e1,e2,e3) -> "Ite(" ^ (ast_to_str e1) ^ "," ^ (ast_to_str e2) ^ "," ^ (ast_to_str e3) ^ ")"
    | Let(e1,e2) -> "Let(" ^ (assign_to_str e1) ^ "," ^ (ast_to_str e2) ^ ")"
    | Lambda(e1,e2) -> "Lambda(" ^ (e1) ^ "," ^ (ast_to_str e2) ^ ")"
    | App( App(op, arg1), arg2) -> "App(App(" ^ op_to_str op ^ "," ^ (ast_to_str arg1) ^ ")," ^ (ast_to_str arg2) ^ ")"
    | App(op, e) -> (match op with
                        Lambda(_,_) as l -> "App(" ^ (ast_to_str l) ^ "," ^ (ast_to_str e) ^ ")"
                        | _ -> "App(" ^ (op_to_str op) ^ "," ^ (ast_to_str e) ^ ")" 
                    )
    | Var(s) -> "Var(" ^ s ^ ")"

    (* Lists *)
    | ListLit(char_list) -> "\"" ^ (char_list_to_str char_list) ^ "\""
    | ListRange(e1, e2) -> "ListRange(" ^ (ast_to_str e1) ^ "," ^ (ast_to_str e2) ^ ")"
    | InfList(e) -> "InfList" ^ (ast_to_str e)
    | ListComp(e, c) -> "ListComp(" ^ (ast_to_str e) ^ "," ^ (clauses_to_str c)

    | BoolLit(b) -> string_of_bool b
    | CharLit(c) -> String.make 1 c
    | IntLit n -> string_of_int n
    | FloatLit f -> string_of_float f
    
    | WildCard -> "WildCard"
    | _ -> ""

and assign_to_str = function | Assign (e1,e2)
	-> (e1) ^ "=" ^ (ast_to_str e2)

and clauses_to_str clauses =
   match clauses with
   | [Filter(e)] -> "Filter(" ^ (ast_to_str e)
   | [ListVBind(e, l)] -> "ListVBind(" ^ (e) ^ "," ^ (ast_to_str l) ^ ")"
   | h::t -> (clauses_to_str [h]) ^ clauses_to_str t
   | [] -> ""

let rec ty_to_str ty =
    match ty with
    | Bool -> "Bool"
    | Int -> "Int"
    | Char -> "Char"
    | Float -> "Float"
    | TconList(t) -> "TconList(" ^ (ty_to_str t) ^ ")"
    | TconTuple(t1,t2) -> "TconTuple(" ^ (ty_to_str t1) ^ "," ^ (ty_to_str t2) ^ ")"
    | Tmaybe(t) -> "Tmaybe(" ^ (ty_to_str t) ^ ")"
    | Tvar(t) -> t
    | Tarrow(t1,t2) -> "Arrow(" ^ (ty_to_str t1) ^ "," ^ (ty_to_str t2) ^ ")"
	| Tforall(_,t) -> "Tforall(" ^ (ty_to_str t) ^ ")"

let rec find_main prog =
        match prog with
            | x :: xs -> (
                match x with 
                    | Annot(_,_) -> find_main xs 
                    | Vdef(ident,_) -> if ident = "main" then "YAY" else
                            find_main xs
            )
            | [] -> "NAY"

let rec check_list_clauses clauses = 
        match clauses with
            | hd :: tl -> (
                    match hd with 
<<<<<<< HEAD
                        | ListVBind(_, lst) -> "GOOD LIST COMPREHENSION"
=======
                        | ListVBind((_), lst) -> "GOOD LIST COMPREHENSION"
>>>>>>> 293dc94e873ada44368807061852d4dd42a25379
                        | _ -> "BAD LIST COMPREHENSION"
                    )
            | [] -> ""



let rec check_lists prog =
        match prog with 
            | x :: xs -> ( match x with
                    | Vdef(ident, expr) -> (
                        match expr with
                            | ListComp(expr, lst) -> check_list_clauses lst
                            | _ -> check_lists xs
                        )
                    | Annot(_,_) -> check_lists xs
            )
            | []-> ""


let rec parse prog =
    	match prog with
                | [Vdef(s, expr)] -> s ^ " = " ^ (ast_to_str expr)
                | [Annot(ident, ty)] -> ident ^ " :: " ^ (ty_to_str ty) 
        	| h::t -> (parse [h]) ^ parse t  
        	| [] -> ""

let _ =
    let lexbuf = Lexing.from_channel stdin in
    let prog = Parser.program Scanner.token lexbuf in
    let ast_str = parse prog in let result = find_main prog in
    let list_result = check_lists prog in
        print_endline (ast_str ^ result ^ list_result)
