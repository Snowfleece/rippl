isPrime :: Int -> Bool
isPrime = \n ->
	let max = quot n 2 in
	let range = [2..max] in
	let divisors = [x | x <- range, mod n x == 0] in
	length divisors == 0	



primeNumberTheorem :: Int -> Int
primeNumberTheorem = \n ->
	let range = [(n+1)..2*n] in
	let oddRange = [x | x <- range, mod x 2 /= 0] in
	foldl (\prev -> \curr -> if isPrime prev then prev else curr) (head oddRange) oddRange 
