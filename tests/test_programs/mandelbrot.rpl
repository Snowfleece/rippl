normSquared :: float -> float -> float
normSquared = fun a -> fun b-> a ^. 2.0 +. b ^. 2.0

encode :: int -> char
encode = fun count ->
	if count == 0
		then 'D'
		else if count < 10
			then 'C'
			else if count < 50
				then 'B'
				else if count < 200
					then 'A'
					else ' '


iterateMandelbrot :: int -> float -> float -> float -> float -> char
iterateMandelbrot = fun c -> fun b_z -> fun a_z -> fun b -> fun a ->
	if (c > 200 )
		then (encode~c)
		else if ((normSquared~(a_z *. a_z -. b_z *. b_z +. a)~
				(2.0 *. a_z *. a_z +. b)) >. 4.0)
			then (encode~c)
			else (iterateMandelbrot~(c+1)~(2.0*.a_z*.b_z +. b)~
				(a_z*.a_z -. b_z*.b_z +. a)~b~a)


everyOther :: [a] -> [a]
everyOther = fun list -> if len list == 0 
					then []
					else if len list == 1
						then [head list]
						else (head list) cons (tail (tail list))

iterateReal :: float -> [char]
iterateReal = fun b ->
	let range = [x /. 100 | x over [-200...100]] in
	let realRange = everyOther~range in
	let realLine = [(iterateMandelbrot~0~0~0~b~p) | p over realRange] in
	realLine cat "\n"

iterateComplex :: [char]
iterateComplex =
	let range = [x /. 100.0 | x over [-100...100]] in
	let complexRange = everyOther~range in
	let iterComplexRec = fun r ->
		(if len r == 0
			then " "
			else (iterateReal~(head r)) cat (iterComplexRec~(tail r)) )
	in iterComplexRec~complexRange

