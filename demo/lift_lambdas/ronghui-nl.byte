; ModuleID = 'Rippl'
source_filename = "Rippl"

%Thunk = type { i8* (%Thunk*)*, i32, i32, %Thunk**, i8*, i32 }
%Node = type { %Thunk*, %Node* }
%List = type { %Node*, i32, i32, %Node*, i32, i32, i32 }

@fmt = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@fmt_int = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt_float = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@add_init_thunk = global %Thunk zeroinitializer, align 32
@sub_init_thunk = global %Thunk zeroinitializer, align 32
@mult_init_thunk = global %Thunk zeroinitializer, align 32
@divi_init_thunk = global %Thunk zeroinitializer, align 32
@mod_init_thunk = global %Thunk zeroinitializer, align 32
@powe_init_thunk = global %Thunk zeroinitializer, align 32
@eq_init_thunk = global %Thunk zeroinitializer, align 32
@neq_init_thunk = global %Thunk zeroinitializer, align 32
@geq_init_thunk = global %Thunk zeroinitializer, align 32
@leq_init_thunk = global %Thunk zeroinitializer, align 32
@less_init_thunk = global %Thunk zeroinitializer, align 32
@greater_init_thunk = global %Thunk zeroinitializer, align 32
@neg_init_thunk = global %Thunk zeroinitializer, align 32
@addf_init_thunk = global %Thunk zeroinitializer, align 32
@subf_init_thunk = global %Thunk zeroinitializer, align 32
@multf_init_thunk = global %Thunk zeroinitializer, align 32
@divf_init_thunk = global %Thunk zeroinitializer, align 32
@powef_init_thunk = global %Thunk zeroinitializer, align 32
@eqf_init_thunk = global %Thunk zeroinitializer, align 32
@neqf_init_thunk = global %Thunk zeroinitializer, align 32
@geqf_init_thunk = global %Thunk zeroinitializer, align 32
@leqf_init_thunk = global %Thunk zeroinitializer, align 32
@lessf_init_thunk = global %Thunk zeroinitializer, align 32
@greaterf_init_thunk = global %Thunk zeroinitializer, align 32
@negf_init_thunk = global %Thunk zeroinitializer, align 32
@andb_init_thunk = global %Thunk zeroinitializer, align 32
@orb_init_thunk = global %Thunk zeroinitializer, align 32
@notb_init_thunk = global %Thunk zeroinitializer, align 32
@cons_init_thunk = global %Thunk zeroinitializer, align 32
@cat_init_thunk = global %Thunk zeroinitializer, align 32
@length_init_thunk = global %Thunk zeroinitializer, align 32
@head_init_thunk = global %Thunk zeroinitializer, align 32
@tail_init_thunk = global %Thunk zeroinitializer, align 32
@is_none_init_thunk = global %Thunk zeroinitializer, align 32
@from_just_init_thunk = global %Thunk zeroinitializer, align 32
@first_init_thunk = global %Thunk zeroinitializer, align 32
@second_init_thunk = global %Thunk zeroinitializer, align 32
@ite_init_thunk = global %Thunk zeroinitializer, align 32
@int_to_float_init_thunk = global %Thunk zeroinitializer, align 32
@Thunk = external global %Thunk
@"$$d_init_thunk" = global %Thunk zeroinitializer
@"$$b_init_thunk" = global %Thunk zeroinitializer
@"$$e_init_thunk" = global %Thunk zeroinitializer
@"$$a_init_thunk" = global %Thunk zeroinitializer

define i32 @main() {
entry:
  call void @initNativeThunks()
  %initThunk = call %Thunk* @init_thunk(%Thunk* @"$$d_init_thunk", i8* (%Thunk*)* @"$eval_d", i32 2, i32 0)
  %initThunk1 = call %Thunk* @init_thunk(%Thunk* @"$$b_init_thunk", i8* (%Thunk*)* @"$eval_b", i32 2, i32 0)
  %initThunk2 = call %Thunk* @init_thunk(%Thunk* @"$$e_init_thunk", i8* (%Thunk*)* @"$eval_e", i32 3, i32 0)
  %initThunk3 = call %Thunk* @init_thunk(%Thunk* @"$$a_init_thunk", i8* (%Thunk*)* @"$eval_a", i32 2, i32 0)
  %ty_heap = alloca i32
  %pos = getelementptr i32, i32* %ty_heap, i32 0
  store i32 0, i32* %pos
  %makeInt = call %Thunk* @makeInt(i32 61)
  %apply = call %Thunk* @apply(%Thunk* @"$$a_init_thunk", %Thunk* %makeInt)
  %makeInt4 = call %Thunk* @makeInt(i32 5)
  %apply5 = call %Thunk* @apply(%Thunk* %apply, %Thunk* %makeInt4)
  %invoke = call i8* @invoke(%Thunk* %apply5)
  call void @printAnyThunk(%Thunk* %apply5, i32* %ty_heap, i32 0)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt, i32 0, i32 0), i8 10)
  ret i32 0
}

declare %Thunk* @makeInt(i32)

declare %Thunk* @makeBool(i8)

declare %Thunk* @makeChar(i8)

declare %Thunk* @makeFloat(float)

declare %Thunk* @makeTuple(%Thunk*, %Thunk*, i32, i32)

declare %Thunk* @makeMaybe(%Thunk*, i32)

declare %Node* @makeNode(%Thunk*)

declare %Thunk* @makeEmptyList(i32)

declare %Thunk* @makeInfinite(i32)

declare %Thunk* @makeRangeList(%Thunk*, %Thunk*)

declare %List* @appendNode(%List*, %Node*)

declare %Thunk* @appendNodeThunk(%Thunk*, %Node*)

declare i32 @printf(i8*, ...)

declare void @printRangeList(%Thunk*)

declare void @printPrim(i8*, i32)

declare void @printAnyThunk(%Thunk*, i32*, i32)

declare void @printBool(i8)

declare void @initNativeThunks()

declare %Thunk* @mapl(%Thunk*, %Thunk*, i32)

declare %Thunk* @filterl(%Thunk*, %Thunk*, i32)

declare %Thunk* @map_listl(%Thunk*, %Thunk*, i32)

declare i32* @add(%Thunk*, %Thunk*)

declare i8* @add_eval(%Thunk*)

declare i32* @sub(%Thunk*, %Thunk*)

declare i8* @sub_eval(%Thunk*)

declare i32* @mult(%Thunk*, %Thunk*)

declare i8* @mult_eval(%Thunk*)

declare i32* @neq(%Thunk*, %Thunk*)

declare i8* @neq_eval(%Thunk*)

declare i8* @addf_eval(%Thunk*)

declare i32* @addf(%Thunk*, %Thunk*)

declare %Thunk* @init_thunk(%Thunk*, i8* (%Thunk*)*, i32, i32)

declare %Thunk* @init_thunk_literal(i8*)

declare %Thunk* @apply(%Thunk*, %Thunk*)

declare i8* @invoke(%Thunk*)

define i8* @"$eval_d"(%Thunk*) {
entry:
  %pthunk = alloca %Thunk*
  %thunk1 = alloca %Thunk*
  %thunk2 = alloca %Thunk*
  %ret = alloca i8*
  store %Thunk* %0, %Thunk** %pthunk
  %tload = load %Thunk*, %Thunk** %pthunk
  %args = getelementptr %Thunk, %Thunk* %tload, i32 0, i32 3
  %loadargs = load %Thunk**, %Thunk*** %args
  %args1 = getelementptr %Thunk*, %Thunk** %loadargs, i32 0
  %loadarg = load %Thunk*, %Thunk** %args1
  store %Thunk* %loadarg, %Thunk** %thunk1
  %tload2 = load %Thunk*, %Thunk** %pthunk
  %args3 = getelementptr %Thunk, %Thunk* %tload2, i32 0, i32 3
  %loadargs4 = load %Thunk**, %Thunk*** %args3
  %args5 = getelementptr %Thunk*, %Thunk** %loadargs4, i32 1
  %loadarg6 = load %Thunk*, %Thunk** %args5
  store %Thunk* %loadarg6, %Thunk** %thunk2
  %load = load %Thunk*, %Thunk** %thunk2
  %load7 = load %Thunk*, %Thunk** %thunk1
  %result = call i8* @d(%Thunk* %load7, %Thunk* %load)
  store i8* %result, i8** %ret
  %retload = load i8*, i8** %ret
  ret i8* %retload
}

define i8* @"$eval_b"(%Thunk*) {
entry:
  %pthunk = alloca %Thunk*
  %thunk1 = alloca %Thunk*
  %thunk2 = alloca %Thunk*
  %ret = alloca i8*
  store %Thunk* %0, %Thunk** %pthunk
  %tload = load %Thunk*, %Thunk** %pthunk
  %args = getelementptr %Thunk, %Thunk* %tload, i32 0, i32 3
  %loadargs = load %Thunk**, %Thunk*** %args
  %args1 = getelementptr %Thunk*, %Thunk** %loadargs, i32 0
  %loadarg = load %Thunk*, %Thunk** %args1
  store %Thunk* %loadarg, %Thunk** %thunk1
  %tload2 = load %Thunk*, %Thunk** %pthunk
  %args3 = getelementptr %Thunk, %Thunk* %tload2, i32 0, i32 3
  %loadargs4 = load %Thunk**, %Thunk*** %args3
  %args5 = getelementptr %Thunk*, %Thunk** %loadargs4, i32 1
  %loadarg6 = load %Thunk*, %Thunk** %args5
  store %Thunk* %loadarg6, %Thunk** %thunk2
  %load = load %Thunk*, %Thunk** %thunk2
  %load7 = load %Thunk*, %Thunk** %thunk1
  %result = call i8* @b(%Thunk* %load7, %Thunk* %load)
  store i8* %result, i8** %ret
  %retload = load i8*, i8** %ret
  ret i8* %retload
}

define i8* @"$eval_e"(%Thunk*) {
entry:
  %pthunk = alloca %Thunk*
  %thunk1 = alloca %Thunk*
  %thunk2 = alloca %Thunk*
  %thunk3 = alloca %Thunk*
  %ret = alloca i8*
  store %Thunk* %0, %Thunk** %pthunk
  %tload = load %Thunk*, %Thunk** %pthunk
  %args = getelementptr %Thunk, %Thunk* %tload, i32 0, i32 3
  %loadargs = load %Thunk**, %Thunk*** %args
  %args1 = getelementptr %Thunk*, %Thunk** %loadargs, i32 0
  %loadarg = load %Thunk*, %Thunk** %args1
  store %Thunk* %loadarg, %Thunk** %thunk1
  %tload2 = load %Thunk*, %Thunk** %pthunk
  %args3 = getelementptr %Thunk, %Thunk* %tload2, i32 0, i32 3
  %loadargs4 = load %Thunk**, %Thunk*** %args3
  %args5 = getelementptr %Thunk*, %Thunk** %loadargs4, i32 1
  %loadarg6 = load %Thunk*, %Thunk** %args5
  store %Thunk* %loadarg6, %Thunk** %thunk2
  %tload7 = load %Thunk*, %Thunk** %pthunk
  %args8 = getelementptr %Thunk, %Thunk* %tload7, i32 0, i32 3
  %loadargs9 = load %Thunk**, %Thunk*** %args8
  %args10 = getelementptr %Thunk*, %Thunk** %loadargs9, i32 2
  %loadarg11 = load %Thunk*, %Thunk** %args10
  store %Thunk* %loadarg11, %Thunk** %thunk3
  %load = load %Thunk*, %Thunk** %thunk3
  %load12 = load %Thunk*, %Thunk** %thunk2
  %load13 = load %Thunk*, %Thunk** %thunk1
  %result = call i8* @e(%Thunk* %load13, %Thunk* %load12, %Thunk* %load)
  store i8* %result, i8** %ret
  %retload = load i8*, i8** %ret
  ret i8* %retload
}

define i8* @"$eval_a"(%Thunk*) {
entry:
  %pthunk = alloca %Thunk*
  %thunk1 = alloca %Thunk*
  %thunk2 = alloca %Thunk*
  %ret = alloca i8*
  store %Thunk* %0, %Thunk** %pthunk
  %tload = load %Thunk*, %Thunk** %pthunk
  %args = getelementptr %Thunk, %Thunk* %tload, i32 0, i32 3
  %loadargs = load %Thunk**, %Thunk*** %args
  %args1 = getelementptr %Thunk*, %Thunk** %loadargs, i32 0
  %loadarg = load %Thunk*, %Thunk** %args1
  store %Thunk* %loadarg, %Thunk** %thunk1
  %tload2 = load %Thunk*, %Thunk** %pthunk
  %args3 = getelementptr %Thunk, %Thunk* %tload2, i32 0, i32 3
  %loadargs4 = load %Thunk**, %Thunk*** %args3
  %args5 = getelementptr %Thunk*, %Thunk** %loadargs4, i32 1
  %loadarg6 = load %Thunk*, %Thunk** %args5
  store %Thunk* %loadarg6, %Thunk** %thunk2
  %load = load %Thunk*, %Thunk** %thunk2
  %load7 = load %Thunk*, %Thunk** %thunk1
  %result = call i8* @a(%Thunk* %load7, %Thunk* %load)
  store i8* %result, i8** %ret
  %retload = load i8*, i8** %ret
  ret i8* %retload
}

define i8* @d(%Thunk*, %Thunk*) {
entry:
  %"$s4" = alloca %Thunk*
  store %Thunk* %0, %Thunk** %"$s4"
  %amanda = load %Thunk*, %Thunk** %"$s4"
  %w = alloca %Thunk*
  store %Thunk* %1, %Thunk** %w
  %amanda1 = load %Thunk*, %Thunk** %w
  %hans = alloca %Thunk*
  store %Thunk* %amanda1, %Thunk** %hans
  %loaded_hans = load %Thunk*, %Thunk** %hans
  %apply = call %Thunk* @apply(%Thunk* @add_init_thunk, %Thunk* %loaded_hans)
  %hans2 = alloca %Thunk*
  store %Thunk* %amanda, %Thunk** %hans2
  %loaded_hans3 = load %Thunk*, %Thunk** %hans2
  %apply4 = call %Thunk* @apply(%Thunk* %apply, %Thunk* %loaded_hans3)
  %da = call i8* @invoke(%Thunk* %apply4)
  ret i8* %da
}

define i8* @b(%Thunk*, %Thunk*) {
entry:
  %"$s5" = alloca %Thunk*
  store %Thunk* %0, %Thunk** %"$s5"
  %amanda = load %Thunk*, %Thunk** %"$s5"
  %y = alloca %Thunk*
  store %Thunk* %1, %Thunk** %y
  %amanda1 = load %Thunk*, %Thunk** %y
  %hans = alloca %Thunk*
  store %Thunk* %amanda, %Thunk** %hans
  %loaded_hans = load %Thunk*, %Thunk** %hans
  %apply = call %Thunk* @apply(%Thunk* @"$$d_init_thunk", %Thunk* %loaded_hans)
  %hans2 = alloca %Thunk*
  store %Thunk* %amanda1, %Thunk** %hans2
  %loaded_hans3 = load %Thunk*, %Thunk** %hans2
  %apply4 = call %Thunk* @apply(%Thunk* @add_init_thunk, %Thunk* %loaded_hans3)
  %makeInt = call %Thunk* @makeInt(i32 1)
  %apply5 = call %Thunk* @apply(%Thunk* %apply4, %Thunk* %makeInt)
  %apply6 = call %Thunk* @apply(%Thunk* %apply, %Thunk* %apply5)
  %da = call i8* @invoke(%Thunk* %apply6)
  ret i8* %da
}

define i8* @e(%Thunk*, %Thunk*, %Thunk*) {
entry:
  %"$b6" = alloca %Thunk*
  store %Thunk* %0, %Thunk** %"$b6"
  %amanda = load %Thunk*, %Thunk** %"$b6"
  %"$s7" = alloca %Thunk*
  store %Thunk* %1, %Thunk** %"$s7"
  %amanda1 = load %Thunk*, %Thunk** %"$s7"
  %q = alloca %Thunk*
  store %Thunk* %2, %Thunk** %q
  %amanda2 = load %Thunk*, %Thunk** %q
  %hans = alloca %Thunk*
  store %Thunk* %amanda, %Thunk** %hans
  %loaded_hans = load %Thunk*, %Thunk** %hans
  %hans3 = alloca %Thunk*
  store %Thunk* %amanda1, %Thunk** %hans3
  %loaded_hans4 = load %Thunk*, %Thunk** %hans3
  %apply = call %Thunk* @apply(%Thunk* %loaded_hans, %Thunk* %loaded_hans4)
  %hans5 = alloca %Thunk*
  store %Thunk* %amanda2, %Thunk** %hans5
  %loaded_hans6 = load %Thunk*, %Thunk** %hans5
  %apply7 = call %Thunk* @apply(%Thunk* @add_init_thunk, %Thunk* %loaded_hans6)
  %makeInt = call %Thunk* @makeInt(i32 1)
  %apply8 = call %Thunk* @apply(%Thunk* %apply7, %Thunk* %makeInt)
  %apply9 = call %Thunk* @apply(%Thunk* %apply, %Thunk* %apply8)
  %da = call i8* @invoke(%Thunk* %apply9)
  ret i8* %da
}

define i8* @a(%Thunk*, %Thunk*) {
entry:
  %s = alloca %Thunk*
  store %Thunk* %1, %Thunk** %s
  %amanda = load %Thunk*, %Thunk** %s
  %x = alloca %Thunk*
  store %Thunk* %0, %Thunk** %x
  %amanda1 = load %Thunk*, %Thunk** %x
  %apply = call %Thunk* @apply(%Thunk* @"$$e_init_thunk", %Thunk* @"$$b_init_thunk")
  %hans = alloca %Thunk*
  store %Thunk* %amanda, %Thunk** %hans
  %loaded_hans = load %Thunk*, %Thunk** %hans
  %apply2 = call %Thunk* @apply(%Thunk* %apply, %Thunk* %loaded_hans)
  %hans3 = alloca %Thunk*
  store %Thunk* %amanda1, %Thunk** %hans3
  %loaded_hans4 = load %Thunk*, %Thunk** %hans3
  %apply5 = call %Thunk* @apply(%Thunk* @add_init_thunk, %Thunk* %loaded_hans4)
  %makeInt = call %Thunk* @makeInt(i32 1)
  %apply6 = call %Thunk* @apply(%Thunk* %apply5, %Thunk* %makeInt)
  %apply7 = call %Thunk* @apply(%Thunk* %apply2, %Thunk* %apply6)
  %da = call i8* @invoke(%Thunk* %apply7)
  ret i8* %da
}

